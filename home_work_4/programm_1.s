.data 
sep:	.asciz "----------\n"			# Строка-разделитель (с \n и нулём в конце)
mes1:	.asciz "Input array lenght n = "	# Подсказка для ввода длинны массива
mes2:	.asciz "Input element value: "		# Подсказка для ввода элемента массива
res1:	.asciz "Sum of array elements: "	# Строка вывода суммы всех элементов массива
res2:	.asciz "Number of summed elements: "	# Строка вывода количества просумированных элементов
res3:	.asciz "Number of even elements: "	# Строка вывода количества четных элементов массива
res4:	.asciz "Number of odd elements: "	# Строка вывода количества нечетных элементов массива
err1:	.asciz "Incorrect input!!!\n"		# Сообщение о некорректном вводе длины массива
err2:	.asciz "Оverflow from above!!!\n"	# Сообщение о перепольнении сверху
err3:	.asciz "Оverflow from below!!!\n"	# Сообщение о перепольнении снизу

.align	2
n: 	.word	0				# Число элементов в массиве
arr:	.space	40				# Выделение памяти для массива

.text
	la	a0, mes1			# Подсказка для ввода числа элементов массива 
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
	li	a7, 5				# Системный вызов №5 — ввести десятичное число
	ecall
	
	mv	t3, a0				# Сохраняем результат в t3 (это n)
	blez	t3, fail1			# На ошибку, если меньше 0
	li 	t4, 10				# Размер массива
	bgt 	t3, t4, fail1			# На ошибку, если больше 10
	la 	t4, n				# Адрес n в t4
	sw	t3, (t4)			# Загрузка n в память на хранение
	
	la      a0, sep				# Выведем строку-разделитель
        li      a7, 4				# Системный вызов №4 - вывод строки
        ecall
	
	la      t0 arr				# Указатель элемента массива
fill:   
	la	a0, mes2			# Подсказка для ввода элемента массива
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
	li	a7, 5				# Системный вызов №5 — ввести десятичное число
	ecall
	mv	t2, a0				# Перемещение числа из a0 в t2 
	sw      t2, (t0)			# Запись числа по адресу в t0
        addi    t0, t0 4			# Увеличим адрес на размер слова в байтах
        addi    t3, t3 -1			# Уменьшим количество оставшихся элементов на 1
        bnez    t3, fill			# Если осталось больше 0

        la      a0, sep				# Выведем строку-разделитель
        li      a7, 4				# Системный вызов №4 - вывод строки
        ecall
        
        lw	t3, n				# Число элементов массива
        la      t0, arr				# Указатель элемента массива
        li	t1, 2				# Запись числа 2 в регистр t1
        li 	t4, 0				# Запись числа 0 в регистр t4
out:    
	lw	a0, (t0)			# Запись элемента массива в регистр a0
	li 	a1, 2147483647			# Запись максимально возможного числа
	li	a2, -2147483648			# Запись минимально возможного числа
	
	if:
	sub 	a1, a1, a0			# Вычитаем из максимально возможного числа a0
	bgt 	t6, a1, fail2			# Проверка на перепольнение сверху
	else_if:
	sub 	a2, a2, a0			# Вычитаем из минимально возможного числа a0
	blt 	t6, a2, fail3			# Проверка на перепольнение снизу
	
	add	t6, t6, a0			# Прибавим к сумме элементов массива новый элемент
	rem	t2, a0, t1			# Проверим четность элемента
	
	if_even:
	bnez 	t2, if_odd			# Перевод на if_odd если число не четное
	addi 	t4, t4, 1 			# Увеличение счетчика четных чисел
	j	end_if
	if_odd:
	addi 	t5, t5, 1 			# Увеличение счетчика нечетных чисел
	end_if:
	
        addi    t0, t0, 4			# Увеличим адрес на размер слова в байтах	
        addi    t3, t3, -1			# Уменьшим количество оставшихся элементов на 1
        bnez    t3, out				# Если осталось больше 0
final:        
        la	a0, res1			# Строка вывода суммы всех элементов массива 
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
        mv 	a0, t6				# Перемещение числа из t6 в a0 
        li	a7, 1				# Системный вызов №1 - вывод десятичного числа
        ecall 	
        li      a0 '\n'        			# Выведем перевод строки
        li      a7 11				# Системный вызов №11 - вывод знака
        ecall
        
        la	a0, res2			# Строка вывода количества просумированных элементов
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
	lw	t6, n
	sub 	t6, t6, t3
        mv 	a0, t6				# Перемещение числа из t6 в a0 
        li	a7, 1				# Системный вызов №1 - вывод десятичного числа
        ecall 	
        li      a0 '\n'        			# Выведем перевод строки
        li      a7 11				# Системный вызов №11 - вывод знака
        ecall
        
        la	a0, res3			# Строка вывода количества четных элементов массива 
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
        mv 	a0, t4				# Перемещение числа из t4 в a0 
        li	a7, 1				# Системный вызов №1 - вывод десятичного числа
        ecall
        li      a0 '\n'        			# Выведем перевод строки
        li      a7 11				# Системный вызов №11 - вывод знака
        ecall
        
        la	a0, res4			# Строка вывода количества нечетных элементов массива 
	li	a7, 4				# Системный вызов №4 - вывод строки
	ecall
        mv 	a0, t5				# Перемещение числа из t5 в a0 	
        li	a7, 1				# Системный вызов №1 - вывод десятичного числа
        ecall
        
        li      a7, 10				# Системный вызов №10 - остановка программы
        ecall
fail1:
        la 	a0, err1     			# Сообщение об ошибке ввода числа элементов массива
        li 	a7, 4         			# Системный вызов №4 - вывод строки
        ecall
        li      a7 10       		   	# Системный вызов №10 - остановка программы
        ecall
fail2:
	la 	a0, err2     			# Сообщение о перепольнении сверху
        li 	a7, 4         			# Системный вызов №4 - вывод строки
        ecall
        j final
fail3:
	la 	a0, err3     			# Сообщение о перепольнении снизу
        li 	a7, 4         			# Системный вызов №4 - вывод строки
        ecall
        j final
	
